/*
* libKNM
* Copyright (C) 2014 Jean-Philippe Clipffel
* Email: jp.clipffel@gmail.com
* 
* This library is free software; you can redistribute it and/or
* modify it under the terms of the GNU Lesser General Public
* License as published by the Free Software Foundation; either
* version 2.1 of the License, or (at your option) any later version.
* 
* This library is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
* Lesser General Public License for more details.
* 
* You should have received a copy of the GNU Lesser General Public
* License along with this library; if not, write to the Free Software
* Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA  02110-1301
* USA
*/

#ifndef KFS_HH
#define KFS_HH

#include <fcntl.h>
#include <string.h>
#include <unistd.h>
#include <stdio.h>
#include <errno.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <fcntl.h>
#include <string>
#include <list>

#include <iostream>

#define 	RETVAL_FAIL		1
#define 	RETVAL_SUCCESS	0
#define 	COPY_L1_SIZE	8192

//using namespace std;

namespace KNM
{
	/**
	 * Common file system operations.
	 * This class provide some useful methods to control the filesystem.
	 */
	class 			KFS
	{
	public:
		KFS();															/**< Default constructor. */

		// Return calls
		bool				success();									/**< Return true is last call was successful, else return false. */
		int 				getReturn();								/**< Return last returned value. */
		const std::string 	&getError();								/**< Return a std::string containing the last error from perror(). */

		// State-only operations
		const std::string 		&pwd();									/**< Return current working directory. */
		bool 					chdir(const std::string &);				/**< Change Directory (effective). */
		std::string				basename(const std::string &);			/**< POSIX basename() wrapper. */
		std::string 			dirname(const std::string &);			/**< POSIX dirname() wrapper. */

		// File and items operations
		bool 	copy(const std::string &, const std::string &);			/**< Recurssively copy a file or directory. */
		bool 	move(const std::string &, const std::string &);			/**< Recurssively move a file or directory. */
		bool 	remove(const std::string &);							/**< Recurssively remove a file or directory.*/
		bool 	mkfile(const std::string &);							/**< Create a file. */
		bool 	mkdir(const std::string &);								/**< Create a directory. */

		// Rights management
		//int 	chmod(const std::string &, const std::string &);		/**< Change mode. */
		//int 	chown(const std::string &, const std::string &);		/**< Change owner. */
		//int 	chgrp(const std::string &, const std::string &);		/**< Change group. */

		// Mounts management
		//int 	mount(const std::string &, const std::string &);		/**< Mount a file system. */
		//int 	umount(const std::string &);							/**< Umount a file system. */

	private:
		bool 			storestate(bool, int);							/**< Store last errors. */

		std::string		error;											/**< Error std::string generated by perror(). */
		std::string 	wd;												/**< Current working directory. */
		int 			retval;											/**< Last return value. */
		bool			retstate;										/**< Last return state. */
	};
}

#endif